import React from"react";const jsonDataCache=[],graphQL_Cache={};function saveDataToCache(t,e,r,s){for(let a=0,i=jsonDataCache.length;a<i;a++){const i=jsonDataCache[a];if(i.url===t&&i.query===e)return i.params=JSON.stringify(r),void(i.data=s)}jsonDataCache.push({url:t,query:e,params:JSON.stringify(r),data:s})}function getDataFromCache(t,e,r){for(let s=0,a=jsonDataCache.length;s<a;s++){const a=jsonDataCache[s];if(a.url===t&&a.query===e){if(JSON.stringify(r)===a.params)return a.data;break}}return null}function IsLoading(t){return 0===t.fetchState&&t.children?t.children:null}function HasError(t){if(!(-1===t.fetchState)||!t.children)return null;let e=t.error;return"string"==typeof e&&-1===e.indexOf("Error")&&(e="Error - "+e),React.cloneElement(t.children,{error:e})}function IsLoaded(t){return 1===t.fetchState&&t.children?React.cloneElement(t.children,{data:t.data,params:t.params,handleChange:t.handleChange}):null}export default class JsonData extends React.Component{constructor(t){super(t),this._isFetching=!1,this._isMounted=!1,this.fetchData=this.fetchData.bind(this),this.handleChange=this.handleChange.bind(this),this.state={fetchState:0,error:null,params:this.getUrlParams(),data:null}}getUrlParams(){const t={};if(this.props&&!0===this.props.graphQL)return void 0===this.props.variables?{}:this.props.variables;for(const e in this.props)"url"!==e&&"string"==typeof this.props[e]&&(t[e]=this.props[e]);return t}componentDidMount(){if(this._isMounted=!0,!0===this.props.graphQL&&void 0===this.props.query&&void 0!==this.props.querySrc&&void 0!==graphQL_Cache[this.props.querySrc]&&(this.props.query=graphQL_Cache[this.props.querySrc]),this.props.loadOnlyOnce){const t=getDataFromCache(this.props.url,this.props.query,this.getUrlParams());if(null!==t)return void this.setState({fetchState:1,data:t})}if(!0!==this.props.graphQL||void 0!==this.props.query||void 0===this.props.querySrc)this.fetchData();else{const t=this.props.querySrc,e=this;fetch(t,null).then(t=>{const e=t.status;if(e>=200&&e<300||304===e)return Promise.resolve(t);{const r="Error loading data. Server Response Code: "+e+", Response Text: "+t.statusText;return Promise.reject(r)}}).then(t=>t.text()).then(function(r){graphQL_Cache[t]=r,e.props.query=graphQL_Cache[t],e.fetchData()}).catch(function(e){throw new Error("Error Downloading GraphQL Script: ["+t+"], Error: "+e.toString())})}}componentDidUpdate(t,e){let r;if(!0===this.props.graphQL)r=JSON.stringify(t.variables)!==JSON.stringify(this.props.variables);else{r=this.buildUrl(e.params)!==this.buildUrl(this.props)}r&&this.setState({params:this.getUrlParams()},this.fetchData)}componentWillUnmount(){this._isMounted=!1}buildUrl(t){let e=this.props.url;if(!0!==this.props.graphQL&&Object.keys(t).length>0)for(var r in t)e.indexOf(":"+r)>-1&&(e=e.replace(new RegExp(":"+r,"g"),encodeURIComponent(t[r])));return e}fetchData(){let t=this.buildUrl(this.state.params);if(this._isFetching)return;this._isFetching=!0;let e={mode:"cors",cache:"no-store",credentials:"same-origin"};if(this.props.fetchOptions&&(e=this.props.fetchOptions),this.props.fetchHeaders&&(e.headers=this.props.fetchHeaders),!0===this.props.graphQL){const r=void 0===this.props.variables?{}:this.props.variables;"file://"===window.location.origin||"null"===window.location.origin?(t+=-1===t.indexOf("?")?"?":"&",t+="query="+encodeURIComponent(this.props.query.trim()),t+="&variables="+encodeURIComponent(JSON.stringify(r))):(e.method="POST",void 0===e.headers?e.headers={"Content-Type":"application/json"}:e.headers["Content-Type"]="application/json",e.body=JSON.stringify({query:this.props.query,variables:r}))}this.setState({fetchState:0},()=>{this.updateView(),fetch(t,e).then(t=>{const e=t.status;if(e>=200&&e<300||304===e)return Promise.resolve(t);{const r="Error loading data. Server Response Code: "+e+", Response Text: "+t.statusText;return Promise.reject(r)}}).then(t=>t.json()).then(t=>{const e=!0===this.props.graphQL;if(e&&t.errors&&t.errors.length){let e;if(1===t.errors.length&&t.errors[0].message)e="[GraphQL Error]: "+t.errors[0].message;else{e=("string"==typeof this.props.errorTextGraphQLErrors?this.props.errorTextGraphQLErrors:"{count} GraphQL Errors occured. See console for full details.").replace("{count}",t.errors.length)}throw console.error(t.errors),e}this._isMounted&&this.setState({fetchState:1,data:e?t.data:t}),this.props.loadOnlyOnce&&saveDataToCache(this.props.url,this.props.query,this.getUrlParams(),e?t.data:t)}).catch(t=>{this._isMounted&&this.setState({fetchState:-1,error:t.toString()})}).finally(()=>{this._isFetching=!1,this.updateView()})})}handleChange(t=null){this._isMounted&&this.setState({data:null===t?this.state.data:t})}updateView(){if("function"==typeof this.props.onViewUpdated)try{this.props.onViewUpdated()}catch(t){console.error(t)}}render(){return React.createElement(React.Fragment,null,React.createElement(IsLoading,{fetchState:this.state.fetchState},this.props.isLoading),React.createElement(HasError,{fetchState:this.state.fetchState,error:this.state.error},this.props.hasError),React.createElement(IsLoaded,{fetchState:this.state.fetchState,data:this.state.data,params:this.state.params,handleChange:this.handleChange},this.props.isLoaded))}};