import React from"react";export default class LazyLoad extends React.Component{constructor(e){super(e),this.state={isReady:!1}}componentDidMount(){this.loadScripts(this.props.scripts,this.props.loadScriptsInOrder).then(()=>{this.setState({isReady:!0})})}loadScripts(e,r){function o(e){return new Promise(function(r){for(var o=document.querySelectorAll("link"),t=0,n=o.length;t<n;t++)if("stylesheet"===o[t].rel&&o[t].getAttribute("href")===e)return void r();var i=document.createElement("link");i.rel="stylesheet",i.onload=r,i.onerror=function(){console.error("Error loading CSS File: "+e),r()},i.href=e,document.head.appendChild(i)})}function t(e){return new Promise(function(r){for(var o=document.querySelectorAll("script"),t=0,n=o.length;t<n;t++)if(o[t].getAttribute("src")===e)return void r();var i=document.createElement("script");i.onload=r,i.onerror=function(){console.error("Error loading JS File: "+e),r()},i.src=e,document.head.appendChild(i)})}function n(e){return new Promise(function(r){for(var o=document.querySelectorAll("script[data-src][data-compiler]"),t=0,n=o.length;t<n;t++)if(o[t].getAttribute("data-src")===e)return void r();var i=document.createElement("script");i.type="text/babel",i.setAttribute("src",e),document.head.appendChild(i),jsxLoader.loadScript(i).then(function(){r()})})}if("string"==typeof e)e=[e];else if(!Array.isArray(e))return console.error("Invalid prop for <LazyLoad>, expected [scripts] to be a string or an array of strings. Check console."),console.log(e),new Promise(function(e){e()});return!0===r?new Promise(function(r){var i=0,s=e.length;!function a(){if(i!==s){var d=e[i];i++,d.endsWith(".js")?t(d).then(a):d.endsWith(".css")?o(d).then(a):d.endsWith(".jsx")?n(d).then(a):(console.error("Invalid Script for <LazyLoad>. Only scripts ending with [js, css, or jsx] can be used. Error URL: "+d),a())}else r()}()}):new Promise(function(r){const i=[];for(let r=0,s=e.length;r<s;r++){const s=e[r];s.endsWith(".js")?i.push(t(s)):s.endsWith(".css")?i.push(o(s)):s.endsWith(".jsx")?i.push(n(s)):console.error("Invalid Script for <LazyLoad>. Only scripts ending with [js, css, or jsx] can be used. Error URL: "+s)}Promise.all(i).then(function(){r()})})}loadPolyfill(e,r){return!1===e||void 0===e?new Promise(function(e,o){var t,n,i;t=e,n=o,(i=document.createElement("script")).onload=function(){t()},i.onerror=function(){console.error("Error loading Script: "+r),n()},i.src=r,document.head.appendChild(i)}):new Promise(function(e){e()})}render(){if(!this.state.isReady)return this.props.isLoading?this.props.isLoading:null;if(this.props.children)return this.props.children;if(this.props.isLoaded){if("string"==typeof this.props.isLoaded){var e=this.props.isLoaded,r={};for(var o in this.props)this.props.hasOwnProperty(o)&&"scripts"!==o&&"isLoaded"!==o&&"isLoading"!==o&&(r[o]=this.props[o]);if(void 0!==window&&void 0!==window[e])return React.createElement(window[e],r);if(void 0!==globalThis&&void 0!==globalThis[e])return React.createElement(globalThis[e],r);throw new TypeError("Component <LazyLoad isLoaded="+JSON.stringify(e)+"> was not found. Check if your script is missing or has a compile error.")}return this.props.isLoaded}throw new TypeError("Missing child nodes or the [isLoaded] property for a <LazyLoad> element.")}};